// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: license.proto

package fpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MiniAppProjectType int32

const (
	MiniAppProjectType_MINI_APP_PROJECT_TYPE_UNKNOWN   MiniAppProjectType = 0
	MiniAppProjectType_MINI_APP_PROJECT_TYPE_MINI_APP  MiniAppProjectType = 1 // 小程序
	MiniAppProjectType_MINI_APP_PROJECT_TYPE_MINI_GAME MiniAppProjectType = 2 // 小游戏
	MiniAppProjectType_MINI_APP_PROJECT_TYPE_H5        MiniAppProjectType = 3 // h5
	MiniAppProjectType_MINI_APP_PROJECT_MINI_COMPONENT MiniAppProjectType = 4 // 小组件
	MiniAppProjectType_MINI_APP_PROJECT_TYPE_CLIP_TRIX MiniAppProjectType = 5 // 低功耗
)

// Enum value maps for MiniAppProjectType.
var (
	MiniAppProjectType_name = map[int32]string{
		0: "MINI_APP_PROJECT_TYPE_UNKNOWN",
		1: "MINI_APP_PROJECT_TYPE_MINI_APP",
		2: "MINI_APP_PROJECT_TYPE_MINI_GAME",
		3: "MINI_APP_PROJECT_TYPE_H5",
		4: "MINI_APP_PROJECT_MINI_COMPONENT",
		5: "MINI_APP_PROJECT_TYPE_CLIP_TRIX",
	}
	MiniAppProjectType_value = map[string]int32{
		"MINI_APP_PROJECT_TYPE_UNKNOWN":   0,
		"MINI_APP_PROJECT_TYPE_MINI_APP":  1,
		"MINI_APP_PROJECT_TYPE_MINI_GAME": 2,
		"MINI_APP_PROJECT_TYPE_H5":        3,
		"MINI_APP_PROJECT_MINI_COMPONENT": 4,
		"MINI_APP_PROJECT_TYPE_CLIP_TRIX": 5,
	}
)

func (x MiniAppProjectType) Enum() *MiniAppProjectType {
	p := new(MiniAppProjectType)
	*p = x
	return p
}

func (x MiniAppProjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiniAppProjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[0].Descriptor()
}

func (MiniAppProjectType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[0]
}

func (x MiniAppProjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MiniAppProjectType.Descriptor instead.
func (MiniAppProjectType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{0}
}

type BundlePlatform int32

const (
	BundlePlatform_BUNDLE_PLATFORM_UNKNOWN     BundlePlatform = 0
	BundlePlatform_BUNDLE_PLATFORM_IOS         BundlePlatform = 1 // ios
	BundlePlatform_BUNDLE_PLATFORM_ANDROID     BundlePlatform = 2 // android
	BundlePlatform_BUNDLE_PLATFORM_ANDROID_IOS BundlePlatform = 3 // android和ios通用
	BundlePlatform_BUNDLE_PLATFORM_WINDOWS     BundlePlatform = 4 // windows
	BundlePlatform_BUNDLE_PLATFORM_HARMONY     BundlePlatform = 5 // harmony
)

// Enum value maps for BundlePlatform.
var (
	BundlePlatform_name = map[int32]string{
		0: "BUNDLE_PLATFORM_UNKNOWN",
		1: "BUNDLE_PLATFORM_IOS",
		2: "BUNDLE_PLATFORM_ANDROID",
		3: "BUNDLE_PLATFORM_ANDROID_IOS",
		4: "BUNDLE_PLATFORM_WINDOWS",
		5: "BUNDLE_PLATFORM_HARMONY",
	}
	BundlePlatform_value = map[string]int32{
		"BUNDLE_PLATFORM_UNKNOWN":     0,
		"BUNDLE_PLATFORM_IOS":         1,
		"BUNDLE_PLATFORM_ANDROID":     2,
		"BUNDLE_PLATFORM_ANDROID_IOS": 3,
		"BUNDLE_PLATFORM_WINDOWS":     4,
		"BUNDLE_PLATFORM_HARMONY":     5,
	}
)

func (x BundlePlatform) Enum() *BundlePlatform {
	p := new(BundlePlatform)
	*p = x
	return p
}

func (x BundlePlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BundlePlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[1].Descriptor()
}

func (BundlePlatform) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[1]
}

func (x BundlePlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BundlePlatform.Descriptor instead.
func (BundlePlatform) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1}
}

type LicenseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganName                   string   `protobuf:"bytes,1,opt,name=organ_name,json=organName,proto3" json:"organName" form:"organName"`                                                                              // 企业名称
	AppCount                    int64    `protobuf:"varint,2,opt,name=app_count,json=appCount,proto3" json:"appCount" form:"appCount"`                                                                                 // 可创建的小程序数量上限
	CooAppCount                 int64    `protobuf:"varint,3,opt,name=coo_app_count,json=cooAppCount,proto3" json:"cooAppCount" form:"cooAppCount"`                                                                    // 可创建的应用数量上限
	ReviewOrganCount            int64    `protobuf:"varint,4,opt,name=review_organ_count,json=reviewOrganCount,proto3" json:"reviewOrganCount" form:"reviewOrganCount"`                                                // 可认证通过的企业数量
	ExpireTime                  int64    `protobuf:"varint,5,opt,name=expire_time,json=expireTime,proto3" json:"expireTime" form:"expireTime"`                                                                         // 服务有效期
	BundleIdCount               int64    `protobuf:"varint,6,opt,name=bundle_id_count,json=bundleIdCount,proto3" json:"bundleIdCount" form:"bundleIdCount"`                                                            // bundleId全局数量限制
	CreateOperAdminByInitServer bool     `protobuf:"varint,7,opt,name=create_oper_admin_by_init_server,json=createOperAdminByInitServer,proto3" json:"createOperAdminByInitServer" form:"createOperAdminByInitServer"` // 通过初始化服务器创建运营管理员【已废弃】
	OpenWhitelistDomain         bool     `protobuf:"varint,8,opt,name=open_whitelist_domain,json=openWhitelistDomain,proto3" json:"openWhitelistDomain" form:"openWhitelistDomain"`                                    // 开放白名单域
	OrganStatusNeverExpire      bool     `protobuf:"varint,9,opt,name=organ_status_never_expire,json=organStatusNeverExpire,proto3" json:"organStatusNeverExpire" form:"organStatusNeverExpire"`                       // 组织过期状态永不过期
	OpenAppSearch               bool     `protobuf:"varint,10,opt,name=open_app_search,json=openAppSearch,proto3" json:"openAppSearch" form:"openAppSearch"`                                                           // 小程序搜索
	OpenApiManage               bool     `protobuf:"varint,11,opt,name=open_api_manage,json=openApiManage,proto3" json:"openApiManage" form:"openApiManage"`                                                           // API、自定义菜单管理
	UrlBlacklist                []string `protobuf:"bytes,12,rep,name=url_blacklist,json=urlBlacklist,proto3" json:"urlBlacklist" form:"urlBlacklist"`                                                                 // URL黑名单
	OpenApm                     bool     `protobuf:"varint,13,opt,name=open_apm,json=openApm,proto3" json:"openApm" form:"openApm"`                                                                                    // 开通应用性能监控
	AppGrayCount                int64    `protobuf:"varint,14,opt,name=app_gray_count,json=appGrayCount,proto3" json:"appGrayCount" form:"appGrayCount"`                                                               // 每个小程序可以同时运行的灰度的数量
	RateLimit                   int64    `protobuf:"varint,15,opt,name=rate_limit,json=rateLimit,proto3" json:"rateLimit" form:"rateLimit"`                                                                            // qps限制
	Domain                      string   `protobuf:"bytes,16,opt,name=domain,proto3" json:"domain" form:"domain"`                                                                                                      // 企业域名
	IsWindows                   bool     `protobuf:"varint,17,opt,name=is_windows,json=isWindows,proto3" json:"isWindows" form:"isWindows"`                                                                            // 操作系统支持 windows
	IsLinux                     bool     `protobuf:"varint,18,opt,name=is_linux,json=isLinux,proto3" json:"isLinux" form:"isLinux"`                                                                                    // 操作系统支持 linux
	IsMac                       bool     `protobuf:"varint,19,opt,name=is_mac,json=isMac,proto3" json:"isMac" form:"isMac"`                                                                                            // 操作系统支持 mac
	IsIos                       bool     `protobuf:"varint,20,opt,name=is_ios,json=isIos,proto3" json:"isIos" form:"isIos"`                                                                                            // 操作系统支持 ios
	IsAndroid                   bool     `protobuf:"varint,21,opt,name=is_android,json=isAndroid,proto3" json:"isAndroid" form:"isAndroid"`                                                                            // 操作系统支持 android
	IsHarmony                   bool     `protobuf:"varint,22,opt,name=is_harmony,json=isHarmony,proto3" json:"isHarmony" form:"isHarmony"`                                                                            // 操作系统支持 harmony
	IsConfiguration             bool     `protobuf:"varint,23,opt,name=is_configuration,json=isConfiguration,proto3" json:"isConfiguration" form:"isConfiguration"`                                                    // 是否SDK需要调用SDK config接口
	IsMiniGame                  bool     `protobuf:"varint,24,opt,name=is_mini_game,json=isMiniGame,proto3" json:"isMiniGame" form:"isMiniGame"`                                                                       // 小游戏
	IsMiniHtml                  bool     `protobuf:"varint,25,opt,name=is_mini_html,json=isMiniHtml,proto3" json:"isMiniHtml" form:"isMiniHtml"`                                                                       // 离线H5
	IsCustomLogo                bool     `protobuf:"varint,26,opt,name=is_custom_logo,json=isCustomLogo,proto3" json:"isCustomLogo" form:"isCustomLogo"`                                                               // 自定义LOGO(UI)
	IsH5Convert                 bool     `protobuf:"varint,27,opt,name=is_h5_convert,json=isH5Convert,proto3" json:"isH5Convert" form:"isH5Convert"`                                                                   // H5预览,小程序转H5
	IsApiCover                  bool     `protobuf:"varint,28,opt,name=is_api_cover,json=isApiCover,proto3" json:"isApiCover" form:"isApiCover"`                                                                       // API覆盖
	IsThirdParty                bool     `protobuf:"varint,29,opt,name=is_third_party,json=isThirdParty,proto3" json:"isThirdParty" form:"isThirdParty"`                                                               // 关联第三方社交平台,发布
	IsDataAnalyse               bool     `protobuf:"varint,30,opt,name=is_data_analyse,json=isDataAnalyse,proto3" json:"isDataAnalyse" form:"isDataAnalyse"`                                                           // 数据分析
	IsLowCode                   bool     `protobuf:"varint,31,opt,name=is_low_code,json=isLowCode,proto3" json:"isLowCode" form:"isLowCode"`                                                                           // 低代码
	IsMiniAppTemplate           bool     `protobuf:"varint,32,opt,name=is_mini_app_template,json=isMiniAppTemplate,proto3" json:"isMiniAppTemplate" form:"isMiniAppTemplate"`                                          // 小程序模板
	// @gotags: json:"isEQXiu" form:"isEQXiu"
	IsEqxiu bool `protobuf:"varint,33,opt,name=is_eqxiu,json=isEqxiu,proto3" json:"isEQXiu" form:"isEQXiu"` // 易企秀
	// @gotags: json:"isALD" form:"isALD"
	IsAld            bool `protobuf:"varint,34,opt,name=is_ald,json=isAld,proto3" json:"isALD" form:"isALD"`                                              // 阿拉丁
	IsMiniPlugin     bool `protobuf:"varint,35,opt,name=is_mini_plugin,json=isMiniPlugin,proto3" json:"isMiniPlugin" form:"isMiniPlugin"`                 // 小程序插件市场
	IsMiniShare      bool `protobuf:"varint,36,opt,name=is_mini_share,json=isMiniShare,proto3" json:"isMiniShare" form:"isMiniShare"`                     // 小程序分享
	IsMultiTenant    bool `protobuf:"varint,37,opt,name=is_multi_tenant,json=isMultiTenant,proto3" json:"isMultiTenant" form:"isMultiTenant"`             // 多租户
	IsClipTrix       bool `protobuf:"varint,38,opt,name=is_clip_trix,json=isClipTrix,proto3" json:"isClipTrix" form:"isClipTrix"`                         // 低功耗
	IsOpenId         bool `protobuf:"varint,39,opt,name=is_open_id,json=isOpenId,proto3" json:"isOpenId" form:"isOpenId"`                                 // 统一账户认证
	IsServerOpenApi  bool `protobuf:"varint,40,opt,name=is_server_open_api,json=isServerOpenApi,proto3" json:"isServerOpenApi" form:"isServerOpenApi"`    // 服务端开放API
	IsFavorite       bool `protobuf:"varint,41,opt,name=is_favorite,json=isFavorite,proto3" json:"isFavorite" form:"isFavorite"`                          // 小程序收藏
	IsItai           bool `protobuf:"varint,42,opt,name=is_itai,json=isItai,proto3" json:"isItai" form:"isItai"`                                          // 信创
	IsLocation       bool `protobuf:"varint,43,opt,name=is_location,json=isLocation,proto3" json:"isLocation" form:"isLocation"`                          // 地图与定位
	IsMessagePublish bool `protobuf:"varint,44,opt,name=is_message_publish,json=isMessagePublish,proto3" json:"isMessagePublish" form:"isMessagePublish"` // 消息推送
	IsPayment        bool `protobuf:"varint,45,opt,name=is_payment,json=isPayment,proto3" json:"isPayment" form:"isPayment"`                              // 支付能力
	IsRecommend      bool `protobuf:"varint,46,opt,name=is_recommend,json=isRecommend,proto3" json:"isRecommend" form:"isRecommend"`                      // 小程序推荐
	// @gotags: json:"isECOManager" form:"isECOManager"
	IsEcoManager         bool     `protobuf:"varint,47,opt,name=is_eco_manager,json=isEcoManager,proto3" json:"isECOManager" form:"isECOManager"`                 // 生态管理
	IsServerLess         bool     `protobuf:"varint,48,opt,name=is_server_less,json=isServerLess,proto3" json:"isServerLess" form:"isServerLess"`                 // 云开发
	IsLive               bool     `protobuf:"varint,49,opt,name=is_live,json=isLive,proto3" json:"isLive" form:"isLive"`                                          // 直播能力
	IsMiniComponent      bool     `protobuf:"varint,50,opt,name=is_mini_component,json=isMiniComponent,proto3" json:"isMiniComponent" form:"isMiniComponent"`     // 小组件
	IsBackend            bool     `protobuf:"varint,51,opt,name=is_backend,json=isBackend,proto3" json:"isBackend" form:"isBackend"`                              // 管理后台
	IsAppGray            bool     `protobuf:"varint,52,opt,name=is_app_gray,json=isAppGray,proto3" json:"isAppGray" form:"isAppGray"`                             // 灰度发布
	IsAllQrcode          bool     `protobuf:"varint,53,opt,name=is_all_qrcode,json=isAllQrcode,proto3" json:"isAllQrcode" form:"isAllQrcode"`                     // 一码通
	IsMiniAi             bool     `protobuf:"varint,54,opt,name=is_mini_ai,json=isMiniAi,proto3" json:"isMiniAi" form:"isMiniAi"`                                 // AI对接
	IsAuditFlow          bool     `protobuf:"varint,55,opt,name=is_audit_flow,json=isAuditFlow,proto3" json:"isAuditFlow" form:"isAuditFlow"`                     // 审核工作流
	IsSystemTicket       bool     `protobuf:"varint,56,opt,name=is_system_ticket,json=isSystemTicket,proto3" json:"isSystemTicket" form:"isSystemTicket"`         // 系统工单
	IsSystemSecurity     bool     `protobuf:"varint,57,opt,name=is_system_security,json=isSystemSecurity,proto3" json:"isSystemSecurity" form:"isSystemSecurity"` // 系统安全管理
	LicenseType          string   `protobuf:"bytes,58,opt,name=license_type,json=licenseType,proto3" json:"licenseType" form:"licenseType"`                       // 授权类型
	Clients              []string `protobuf:"bytes,59,rep,name=clients,proto3" json:"clients" form:"clients"`                                                     // 支持的客户端
	DeviceNum            int64    `protobuf:"varint,60,opt,name=device_num,json=deviceNum,proto3" json:"deviceNum" form:"deviceNum"`                              // 设备数量
	AppStoreNum          int64    `protobuf:"varint,61,opt,name=app_store_num,json=appStoreNum,proto3" json:"appStoreNum" form:"appStoreNum"`                     // 应用商店数量
	TotalApiNum          int64    `protobuf:"varint,62,opt,name=total_api_num,json=totalApiNum,proto3" json:"totalApiNum" form:"totalApiNum"`                     // 总API数量
	IsExceeding          bool     `protobuf:"varint,63,opt,name=is_exceeding,json=isExceeding,proto3" json:"isExceeding" form:"isExceeding"`                      // 是否超限
	Desc                 string   `protobuf:"bytes,64,opt,name=desc,proto3" json:"desc" form:"desc"`                                                              // 描述
	EncType              string   `protobuf:"bytes,65,opt,name=enc_type,json=encType,proto3" json:"encType" form:"encType"`                                       // 加密方式
	Channel              string   `protobuf:"bytes,66,opt,name=channel,proto3" json:"channel" form:"channel"`                                                     // 渠道
	HasActiveExtResource bool     `protobuf:"varint,67,opt,name=has_active_ext_resource,json=hasActiveExtResource,proto3" json:"hasActiveExtResource" form:"hasActiveExtResource"`
}

func (x *LicenseData) Reset() {
	*x = LicenseData{}
	mi := &file_license_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseData) ProtoMessage() {}

func (x *LicenseData) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseData.ProtoReflect.Descriptor instead.
func (*LicenseData) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{0}
}

func (x *LicenseData) GetOrganName() string {
	if x != nil {
		return x.OrganName
	}
	return ""
}

func (x *LicenseData) GetAppCount() int64 {
	if x != nil {
		return x.AppCount
	}
	return 0
}

func (x *LicenseData) GetCooAppCount() int64 {
	if x != nil {
		return x.CooAppCount
	}
	return 0
}

func (x *LicenseData) GetReviewOrganCount() int64 {
	if x != nil {
		return x.ReviewOrganCount
	}
	return 0
}

func (x *LicenseData) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *LicenseData) GetBundleIdCount() int64 {
	if x != nil {
		return x.BundleIdCount
	}
	return 0
}

func (x *LicenseData) GetCreateOperAdminByInitServer() bool {
	if x != nil {
		return x.CreateOperAdminByInitServer
	}
	return false
}

func (x *LicenseData) GetOpenWhitelistDomain() bool {
	if x != nil {
		return x.OpenWhitelistDomain
	}
	return false
}

func (x *LicenseData) GetOrganStatusNeverExpire() bool {
	if x != nil {
		return x.OrganStatusNeverExpire
	}
	return false
}

func (x *LicenseData) GetOpenAppSearch() bool {
	if x != nil {
		return x.OpenAppSearch
	}
	return false
}

func (x *LicenseData) GetOpenApiManage() bool {
	if x != nil {
		return x.OpenApiManage
	}
	return false
}

func (x *LicenseData) GetUrlBlacklist() []string {
	if x != nil {
		return x.UrlBlacklist
	}
	return nil
}

func (x *LicenseData) GetOpenApm() bool {
	if x != nil {
		return x.OpenApm
	}
	return false
}

func (x *LicenseData) GetAppGrayCount() int64 {
	if x != nil {
		return x.AppGrayCount
	}
	return 0
}

func (x *LicenseData) GetRateLimit() int64 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

func (x *LicenseData) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *LicenseData) GetIsWindows() bool {
	if x != nil {
		return x.IsWindows
	}
	return false
}

func (x *LicenseData) GetIsLinux() bool {
	if x != nil {
		return x.IsLinux
	}
	return false
}

func (x *LicenseData) GetIsMac() bool {
	if x != nil {
		return x.IsMac
	}
	return false
}

func (x *LicenseData) GetIsIos() bool {
	if x != nil {
		return x.IsIos
	}
	return false
}

func (x *LicenseData) GetIsAndroid() bool {
	if x != nil {
		return x.IsAndroid
	}
	return false
}

func (x *LicenseData) GetIsHarmony() bool {
	if x != nil {
		return x.IsHarmony
	}
	return false
}

func (x *LicenseData) GetIsConfiguration() bool {
	if x != nil {
		return x.IsConfiguration
	}
	return false
}

func (x *LicenseData) GetIsMiniGame() bool {
	if x != nil {
		return x.IsMiniGame
	}
	return false
}

func (x *LicenseData) GetIsMiniHtml() bool {
	if x != nil {
		return x.IsMiniHtml
	}
	return false
}

func (x *LicenseData) GetIsCustomLogo() bool {
	if x != nil {
		return x.IsCustomLogo
	}
	return false
}

func (x *LicenseData) GetIsH5Convert() bool {
	if x != nil {
		return x.IsH5Convert
	}
	return false
}

func (x *LicenseData) GetIsApiCover() bool {
	if x != nil {
		return x.IsApiCover
	}
	return false
}

func (x *LicenseData) GetIsThirdParty() bool {
	if x != nil {
		return x.IsThirdParty
	}
	return false
}

func (x *LicenseData) GetIsDataAnalyse() bool {
	if x != nil {
		return x.IsDataAnalyse
	}
	return false
}

func (x *LicenseData) GetIsLowCode() bool {
	if x != nil {
		return x.IsLowCode
	}
	return false
}

func (x *LicenseData) GetIsMiniAppTemplate() bool {
	if x != nil {
		return x.IsMiniAppTemplate
	}
	return false
}

func (x *LicenseData) GetIsEqxiu() bool {
	if x != nil {
		return x.IsEqxiu
	}
	return false
}

func (x *LicenseData) GetIsAld() bool {
	if x != nil {
		return x.IsAld
	}
	return false
}

func (x *LicenseData) GetIsMiniPlugin() bool {
	if x != nil {
		return x.IsMiniPlugin
	}
	return false
}

func (x *LicenseData) GetIsMiniShare() bool {
	if x != nil {
		return x.IsMiniShare
	}
	return false
}

func (x *LicenseData) GetIsMultiTenant() bool {
	if x != nil {
		return x.IsMultiTenant
	}
	return false
}

func (x *LicenseData) GetIsClipTrix() bool {
	if x != nil {
		return x.IsClipTrix
	}
	return false
}

func (x *LicenseData) GetIsOpenId() bool {
	if x != nil {
		return x.IsOpenId
	}
	return false
}

func (x *LicenseData) GetIsServerOpenApi() bool {
	if x != nil {
		return x.IsServerOpenApi
	}
	return false
}

func (x *LicenseData) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *LicenseData) GetIsItai() bool {
	if x != nil {
		return x.IsItai
	}
	return false
}

func (x *LicenseData) GetIsLocation() bool {
	if x != nil {
		return x.IsLocation
	}
	return false
}

func (x *LicenseData) GetIsMessagePublish() bool {
	if x != nil {
		return x.IsMessagePublish
	}
	return false
}

func (x *LicenseData) GetIsPayment() bool {
	if x != nil {
		return x.IsPayment
	}
	return false
}

func (x *LicenseData) GetIsRecommend() bool {
	if x != nil {
		return x.IsRecommend
	}
	return false
}

func (x *LicenseData) GetIsEcoManager() bool {
	if x != nil {
		return x.IsEcoManager
	}
	return false
}

func (x *LicenseData) GetIsServerLess() bool {
	if x != nil {
		return x.IsServerLess
	}
	return false
}

func (x *LicenseData) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *LicenseData) GetIsMiniComponent() bool {
	if x != nil {
		return x.IsMiniComponent
	}
	return false
}

func (x *LicenseData) GetIsBackend() bool {
	if x != nil {
		return x.IsBackend
	}
	return false
}

func (x *LicenseData) GetIsAppGray() bool {
	if x != nil {
		return x.IsAppGray
	}
	return false
}

func (x *LicenseData) GetIsAllQrcode() bool {
	if x != nil {
		return x.IsAllQrcode
	}
	return false
}

func (x *LicenseData) GetIsMiniAi() bool {
	if x != nil {
		return x.IsMiniAi
	}
	return false
}

func (x *LicenseData) GetIsAuditFlow() bool {
	if x != nil {
		return x.IsAuditFlow
	}
	return false
}

func (x *LicenseData) GetIsSystemTicket() bool {
	if x != nil {
		return x.IsSystemTicket
	}
	return false
}

func (x *LicenseData) GetIsSystemSecurity() bool {
	if x != nil {
		return x.IsSystemSecurity
	}
	return false
}

func (x *LicenseData) GetLicenseType() string {
	if x != nil {
		return x.LicenseType
	}
	return ""
}

func (x *LicenseData) GetClients() []string {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *LicenseData) GetDeviceNum() int64 {
	if x != nil {
		return x.DeviceNum
	}
	return 0
}

func (x *LicenseData) GetAppStoreNum() int64 {
	if x != nil {
		return x.AppStoreNum
	}
	return 0
}

func (x *LicenseData) GetTotalApiNum() int64 {
	if x != nil {
		return x.TotalApiNum
	}
	return 0
}

func (x *LicenseData) GetIsExceeding() bool {
	if x != nil {
		return x.IsExceeding
	}
	return false
}

func (x *LicenseData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *LicenseData) GetEncType() string {
	if x != nil {
		return x.EncType
	}
	return ""
}

func (x *LicenseData) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *LicenseData) GetHasActiveExtResource() bool {
	if x != nil {
		return x.HasActiveExtResource
	}
	return false
}

type ListExtLicenseHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveItems  []*ExtLicenseResource `protobuf:"bytes,1,rep,name=active_items,json=activeItems,proto3" json:"activeItems" form:"activeItems"`     // 特殊qps历史记录
	ExpiredItems []*ExtLicenseResource `protobuf:"bytes,2,rep,name=expired_items,json=expiredItems,proto3" json:"expiredItems" form:"expiredItems"` // 特殊qps历史记录
}

func (x *ListExtLicenseHistoryResp) Reset() {
	*x = ListExtLicenseHistoryResp{}
	mi := &file_license_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExtLicenseHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExtLicenseHistoryResp) ProtoMessage() {}

func (x *ListExtLicenseHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExtLicenseHistoryResp.ProtoReflect.Descriptor instead.
func (*ListExtLicenseHistoryResp) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1}
}

func (x *ListExtLicenseHistoryResp) GetActiveItems() []*ExtLicenseResource {
	if x != nil {
		return x.ActiveItems
	}
	return nil
}

func (x *ListExtLicenseHistoryResp) GetExpiredItems() []*ExtLicenseResource {
	if x != nil {
		return x.ExpiredItems
	}
	return nil
}

type UpdateExtLicenseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content" form:"content"`
}

func (x *UpdateExtLicenseReq) Reset() {
	*x = UpdateExtLicenseReq{}
	mi := &file_license_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExtLicenseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExtLicenseReq) ProtoMessage() {}

func (x *UpdateExtLicenseReq) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExtLicenseReq.ProtoReflect.Descriptor instead.
func (*UpdateExtLicenseReq) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateExtLicenseReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CheckExtLicenseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ExtLicenseResource `protobuf:"bytes,1,rep,name=items,proto3" json:"items" form:"items"`
	Hash  string                `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash" form:"hash"`
}

func (x *CheckExtLicenseResp) Reset() {
	*x = CheckExtLicenseResp{}
	mi := &file_license_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckExtLicenseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExtLicenseResp) ProtoMessage() {}

func (x *CheckExtLicenseResp) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExtLicenseResp.ProtoReflect.Descriptor instead.
func (*CheckExtLicenseResp) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{3}
}

func (x *CheckExtLicenseResp) GetItems() []*ExtLicenseResource {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CheckExtLicenseResp) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type ExtLicenseResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType      string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resourceType" form:"resourceType"`
	ResourceValue     int64  `protobuf:"varint,2,opt,name=resource_value,json=resourceValue,proto3" json:"resourceValue" form:"resourceValue"`                  // 值
	ResourceStartTime int64  `protobuf:"varint,3,opt,name=resource_start_time,json=resourceStartTime,proto3" json:"resourceStartTime" form:"resourceStartTime"` // 有效时间
	ResourceExpired   int64  `protobuf:"varint,4,opt,name=resource_expired,json=resourceExpired,proto3" json:"resourceExpired" form:"resourceExpired"`          // 过期时间
}

func (x *ExtLicenseResource) Reset() {
	*x = ExtLicenseResource{}
	mi := &file_license_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtLicenseResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtLicenseResource) ProtoMessage() {}

func (x *ExtLicenseResource) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtLicenseResource.ProtoReflect.Descriptor instead.
func (*ExtLicenseResource) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{4}
}

func (x *ExtLicenseResource) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ExtLicenseResource) GetResourceValue() int64 {
	if x != nil {
		return x.ResourceValue
	}
	return 0
}

func (x *ExtLicenseResource) GetResourceStartTime() int64 {
	if x != nil {
		return x.ResourceStartTime
	}
	return 0
}

func (x *ExtLicenseResource) GetResourceExpired() int64 {
	if x != nil {
		return x.ResourceExpired
	}
	return 0
}

type UpdateLicenseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseStr string `protobuf:"bytes,1,opt,name=license_str,json=licenseStr,proto3" json:"licenseStr" form:"licenseStr"` // license 加密字符串
}

func (x *UpdateLicenseReq) Reset() {
	*x = UpdateLicenseReq{}
	mi := &file_license_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLicenseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLicenseReq) ProtoMessage() {}

func (x *UpdateLicenseReq) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLicenseReq.ProtoReflect.Descriptor instead.
func (*UpdateLicenseReq) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateLicenseReq) GetLicenseStr() string {
	if x != nil {
		return x.LicenseStr
	}
	return ""
}

type CheckLicenseRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid    bool  `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"isValid" form:"isValid"`             // license 是否有效
	ExpireTime int64 `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expireTime" form:"expireTime"` // license 过期时间
}

func (x *CheckLicenseRsp) Reset() {
	*x = CheckLicenseRsp{}
	mi := &file_license_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckLicenseRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLicenseRsp) ProtoMessage() {}

func (x *CheckLicenseRsp) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLicenseRsp.ProtoReflect.Descriptor instead.
func (*CheckLicenseRsp) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6}
}

func (x *CheckLicenseRsp) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckLicenseRsp) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type CheckLicenseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseStr string `protobuf:"bytes,1,opt,name=license_str,json=licenseStr,proto3" json:"licenseStr" form:"licenseStr"` // license 加密字符串
}

func (x *CheckLicenseReq) Reset() {
	*x = CheckLicenseReq{}
	mi := &file_license_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckLicenseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLicenseReq) ProtoMessage() {}

func (x *CheckLicenseReq) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLicenseReq.ProtoReflect.Descriptor instead.
func (*CheckLicenseReq) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{7}
}

func (x *CheckLicenseReq) GetLicenseStr() string {
	if x != nil {
		return x.LicenseStr
	}
	return ""
}

type LicenseEncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseEncryptStr string `protobuf:"bytes,1,opt,name=license_encrypt_str,json=licenseEncryptStr,proto3" json:"licenseEncryptStr" form:"licenseEncryptStr"`
}

func (x *LicenseEncryptResp) Reset() {
	*x = LicenseEncryptResp{}
	mi := &file_license_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseEncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseEncryptResp) ProtoMessage() {}

func (x *LicenseEncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseEncryptResp.ProtoReflect.Descriptor instead.
func (*LicenseEncryptResp) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{8}
}

func (x *LicenseEncryptResp) GetLicenseEncryptStr() string {
	if x != nil {
		return x.LicenseEncryptStr
	}
	return ""
}

type CheckLicenseNumRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiniApp  *CheckMiniAppLicenseItemDesc `protobuf:"bytes,1,opt,name=mini_app,json=miniApp,proto3" json:"miniApp" form:"miniApp"`     // 小程序数量校验信息
	HostApp  *CheckLicenseItemDesc        `protobuf:"bytes,2,opt,name=host_app,json=hostApp,proto3" json:"hostApp" form:"hostApp"`     // 应用数量校验信息
	Bundle   *CheckBundleLicenseItemDesc  `protobuf:"bytes,3,opt,name=bundle,proto3" json:"bundle" form:"bundle"`                      // bundleId数量校验信息
	DevOrgan *CheckLicenseItemDesc        `protobuf:"bytes,4,opt,name=dev_organ,json=devOrgan,proto3" json:"devOrgan" form:"devOrgan"` // 企业数量校验信息
}

func (x *CheckLicenseNumRsp) Reset() {
	*x = CheckLicenseNumRsp{}
	mi := &file_license_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckLicenseNumRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLicenseNumRsp) ProtoMessage() {}

func (x *CheckLicenseNumRsp) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLicenseNumRsp.ProtoReflect.Descriptor instead.
func (*CheckLicenseNumRsp) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{9}
}

func (x *CheckLicenseNumRsp) GetMiniApp() *CheckMiniAppLicenseItemDesc {
	if x != nil {
		return x.MiniApp
	}
	return nil
}

func (x *CheckLicenseNumRsp) GetHostApp() *CheckLicenseItemDesc {
	if x != nil {
		return x.HostApp
	}
	return nil
}

func (x *CheckLicenseNumRsp) GetBundle() *CheckBundleLicenseItemDesc {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *CheckLicenseNumRsp) GetDevOrgan() *CheckLicenseItemDesc {
	if x != nil {
		return x.DevOrgan
	}
	return nil
}

type CheckMiniAppLicenseItemDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid                               bool                 `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"isValid" form:"isValid"`                                                                                                                                                                          // 是否有效
	InvalidDesc                           string               `protobuf:"bytes,2,opt,name=invalid_desc,json=invalidDesc,proto3" json:"invalidDesc" form:"invalidDesc"`                                                                                                                                                           // 禁止更新的描述
	NewLicenseDisableButExistProjectTypes []MiniAppProjectType `protobuf:"varint,3,rep,packed,name=new_license_disable_but_exist_project_types,json=newLicenseDisableButExistProjectTypes,proto3,enum=go_common.v1.MiniAppProjectType" json:"newLicenseDisableButExistProjectTypes" form:"newLicenseDisableButExistProjectTypes"` // 新license禁用了，但是系统里面存在对应类型的小程序
	ShouldDisableCount                    int64                `protobuf:"varint,4,opt,name=should_disable_count,json=shouldDisableCount,proto3" json:"shouldDisableCount" form:"shouldDisableCount"`                                                                                                                             // 应该禁用的数量
}

func (x *CheckMiniAppLicenseItemDesc) Reset() {
	*x = CheckMiniAppLicenseItemDesc{}
	mi := &file_license_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckMiniAppLicenseItemDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMiniAppLicenseItemDesc) ProtoMessage() {}

func (x *CheckMiniAppLicenseItemDesc) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMiniAppLicenseItemDesc.ProtoReflect.Descriptor instead.
func (*CheckMiniAppLicenseItemDesc) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{10}
}

func (x *CheckMiniAppLicenseItemDesc) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckMiniAppLicenseItemDesc) GetInvalidDesc() string {
	if x != nil {
		return x.InvalidDesc
	}
	return ""
}

func (x *CheckMiniAppLicenseItemDesc) GetNewLicenseDisableButExistProjectTypes() []MiniAppProjectType {
	if x != nil {
		return x.NewLicenseDisableButExistProjectTypes
	}
	return nil
}

func (x *CheckMiniAppLicenseItemDesc) GetShouldDisableCount() int64 {
	if x != nil {
		return x.ShouldDisableCount
	}
	return 0
}

type CheckBundleLicenseItemDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid                                 bool             `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"isValid" form:"isValid"`                                                                                                                                                                              // 是否有效
	InvalidDesc                             string           `protobuf:"bytes,2,opt,name=invalid_desc,json=invalidDesc,proto3" json:"invalidDesc" form:"invalidDesc"`                                                                                                                                                               // 禁止更新的描述
	NewLicenseDisableButExistBundlePlatform []BundlePlatform `protobuf:"varint,3,rep,packed,name=new_license_disable_but_exist_bundle_platform,json=newLicenseDisableButExistBundlePlatform,proto3,enum=go_common.v1.BundlePlatform" json:"newLicenseDisableButExistBundlePlatform" form:"newLicenseDisableButExistBundlePlatform"` // 新license禁用了，但是系统里面存在对应类型的bundle
	ShouldDisableCount                      int64            `protobuf:"varint,4,opt,name=should_disable_count,json=shouldDisableCount,proto3" json:"shouldDisableCount" form:"shouldDisableCount"`                                                                                                                                 // 应该禁用的数量
}

func (x *CheckBundleLicenseItemDesc) Reset() {
	*x = CheckBundleLicenseItemDesc{}
	mi := &file_license_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckBundleLicenseItemDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBundleLicenseItemDesc) ProtoMessage() {}

func (x *CheckBundleLicenseItemDesc) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBundleLicenseItemDesc.ProtoReflect.Descriptor instead.
func (*CheckBundleLicenseItemDesc) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{11}
}

func (x *CheckBundleLicenseItemDesc) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckBundleLicenseItemDesc) GetInvalidDesc() string {
	if x != nil {
		return x.InvalidDesc
	}
	return ""
}

func (x *CheckBundleLicenseItemDesc) GetNewLicenseDisableButExistBundlePlatform() []BundlePlatform {
	if x != nil {
		return x.NewLicenseDisableButExistBundlePlatform
	}
	return nil
}

func (x *CheckBundleLicenseItemDesc) GetShouldDisableCount() int64 {
	if x != nil {
		return x.ShouldDisableCount
	}
	return 0
}

type CheckLicenseItemDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid            bool   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"isValid" form:"isValid"`                                              // 是否有效
	InvalidDesc        string `protobuf:"bytes,2,opt,name=invalid_desc,json=invalidDesc,proto3" json:"invalidDesc" form:"invalidDesc"`                               // 禁止更新的描述
	ShouldDisableCount int64  `protobuf:"varint,3,opt,name=should_disable_count,json=shouldDisableCount,proto3" json:"shouldDisableCount" form:"shouldDisableCount"` // 应该禁用的数量
}

func (x *CheckLicenseItemDesc) Reset() {
	*x = CheckLicenseItemDesc{}
	mi := &file_license_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckLicenseItemDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLicenseItemDesc) ProtoMessage() {}

func (x *CheckLicenseItemDesc) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLicenseItemDesc.ProtoReflect.Descriptor instead.
func (*CheckLicenseItemDesc) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{12}
}

func (x *CheckLicenseItemDesc) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckLicenseItemDesc) GetInvalidDesc() string {
	if x != nil {
		return x.InvalidDesc
	}
	return ""
}

func (x *CheckLicenseItemDesc) GetShouldDisableCount() int64 {
	if x != nil {
		return x.ShouldDisableCount
	}
	return 0
}

type GetUpdateLicenseExpireTimeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTime int64 `protobuf:"varint,1,opt,name=expire_time,json=expireTime,proto3" json:"expireTime" form:"expireTime"` // 过期时间
}

func (x *GetUpdateLicenseExpireTimeRsp) Reset() {
	*x = GetUpdateLicenseExpireTimeRsp{}
	mi := &file_license_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUpdateLicenseExpireTimeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateLicenseExpireTimeRsp) ProtoMessage() {}

func (x *GetUpdateLicenseExpireTimeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateLicenseExpireTimeRsp.ProtoReflect.Descriptor instead.
func (*GetUpdateLicenseExpireTimeRsp) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{13}
}

func (x *GetUpdateLicenseExpireTimeRsp) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

var File_license_proto protoreflect.FileDescriptor

var file_license_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0xd8, 0x12,
	0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6f,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42,
	0x79, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x39, 0x0a, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6e, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x65, 0x76, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x6e, 0x41, 0x70, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x72,
	0x6c, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x72, 0x6c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x47, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x75,
	0x78, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x4d, 0x61, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x69,
	0x6f, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x49, 0x6f, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x35, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x35, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x41, 0x70, 0x69, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c,
	0x6f, 0x77, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x71,
	0x78, 0x69, 0x75, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x71, 0x78,
	0x69, 0x75, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x69, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x70, 0x54, 0x72, 0x69, 0x78, 0x12, 0x1c, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x69, 0x74, 0x61, 0x69, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x49, 0x74,
	0x61, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45,
	0x63, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72,
	0x61, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x47,
	0x72, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x71, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6c,
	0x6c, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x69,
	0x6e, 0x69, 0x5f, 0x61, 0x69, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d,
	0x69, 0x6e, 0x69, 0x41, 0x69, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x3b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xbb, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x22, 0x4d, 0x0a, 0x0f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x22, 0x44, 0x0a, 0x12,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53,
	0x74, 0x72, 0x22, 0x9c, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x69, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x12,
	0x3d, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x12, 0x40,
	0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x3f, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x52, 0x08, 0x64, 0x65, 0x76, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x69, 0x41,
	0x70, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x7c, 0x0a, 0x2b, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x25, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x8a, 0x02, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x7c, 0x0a, 0x2d,
	0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x27, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a,
	0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0xe8, 0x01, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x69,
	0x41, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x5f,
	0x41, 0x50, 0x50, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49,
	0x4e, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x35, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49, 0x4e, 0x49,
	0x5f, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x49, 0x4e,
	0x49, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x50, 0x5f, 0x54, 0x52, 0x49, 0x58,
	0x10, 0x05, 0x2a, 0xbe, 0x01, 0x0a, 0x0e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42,
	0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41,
	0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x4e,
	0x44, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x49, 0x4e,
	0x44, 0x4f, 0x57, 0x53, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x48, 0x41, 0x52, 0x4d, 0x4f, 0x4e,
	0x59, 0x10, 0x05, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x66, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_license_proto_rawDescOnce sync.Once
	file_license_proto_rawDescData = file_license_proto_rawDesc
)

func file_license_proto_rawDescGZIP() []byte {
	file_license_proto_rawDescOnce.Do(func() {
		file_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_license_proto_rawDescData)
	})
	return file_license_proto_rawDescData
}

var file_license_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_license_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_license_proto_goTypes = []any{
	(MiniAppProjectType)(0),               // 0: go_common.v1.MiniAppProjectType
	(BundlePlatform)(0),                   // 1: go_common.v1.BundlePlatform
	(*LicenseData)(nil),                   // 2: go_common.v1.LicenseData
	(*ListExtLicenseHistoryResp)(nil),     // 3: go_common.v1.ListExtLicenseHistoryResp
	(*UpdateExtLicenseReq)(nil),           // 4: go_common.v1.UpdateExtLicenseReq
	(*CheckExtLicenseResp)(nil),           // 5: go_common.v1.CheckExtLicenseResp
	(*ExtLicenseResource)(nil),            // 6: go_common.v1.ExtLicenseResource
	(*UpdateLicenseReq)(nil),              // 7: go_common.v1.UpdateLicenseReq
	(*CheckLicenseRsp)(nil),               // 8: go_common.v1.CheckLicenseRsp
	(*CheckLicenseReq)(nil),               // 9: go_common.v1.CheckLicenseReq
	(*LicenseEncryptResp)(nil),            // 10: go_common.v1.LicenseEncryptResp
	(*CheckLicenseNumRsp)(nil),            // 11: go_common.v1.CheckLicenseNumRsp
	(*CheckMiniAppLicenseItemDesc)(nil),   // 12: go_common.v1.CheckMiniAppLicenseItemDesc
	(*CheckBundleLicenseItemDesc)(nil),    // 13: go_common.v1.CheckBundleLicenseItemDesc
	(*CheckLicenseItemDesc)(nil),          // 14: go_common.v1.CheckLicenseItemDesc
	(*GetUpdateLicenseExpireTimeRsp)(nil), // 15: go_common.v1.GetUpdateLicenseExpireTimeRsp
}
var file_license_proto_depIdxs = []int32{
	6,  // 0: go_common.v1.ListExtLicenseHistoryResp.active_items:type_name -> go_common.v1.ExtLicenseResource
	6,  // 1: go_common.v1.ListExtLicenseHistoryResp.expired_items:type_name -> go_common.v1.ExtLicenseResource
	6,  // 2: go_common.v1.CheckExtLicenseResp.items:type_name -> go_common.v1.ExtLicenseResource
	12, // 3: go_common.v1.CheckLicenseNumRsp.mini_app:type_name -> go_common.v1.CheckMiniAppLicenseItemDesc
	14, // 4: go_common.v1.CheckLicenseNumRsp.host_app:type_name -> go_common.v1.CheckLicenseItemDesc
	13, // 5: go_common.v1.CheckLicenseNumRsp.bundle:type_name -> go_common.v1.CheckBundleLicenseItemDesc
	14, // 6: go_common.v1.CheckLicenseNumRsp.dev_organ:type_name -> go_common.v1.CheckLicenseItemDesc
	0,  // 7: go_common.v1.CheckMiniAppLicenseItemDesc.new_license_disable_but_exist_project_types:type_name -> go_common.v1.MiniAppProjectType
	1,  // 8: go_common.v1.CheckBundleLicenseItemDesc.new_license_disable_but_exist_bundle_platform:type_name -> go_common.v1.BundlePlatform
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_license_proto_init() }
func file_license_proto_init() {
	if File_license_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_license_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_license_proto_goTypes,
		DependencyIndexes: file_license_proto_depIdxs,
		EnumInfos:         file_license_proto_enumTypes,
		MessageInfos:      file_license_proto_msgTypes,
	}.Build()
	File_license_proto = out.File
	file_license_proto_rawDesc = nil
	file_license_proto_goTypes = nil
	file_license_proto_depIdxs = nil
}
